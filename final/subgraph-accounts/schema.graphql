type Query {
  user(id: ID!): User
  "Currently logged-in user"
  me: User!
}

interface User {
  id: ID!
  "The user's first and last name"
  name: String!
  "The user's profile photo URL"
  profilePicture: String!
}

type Host implements User @key(fields: "id") {
  id: ID!
  "The user's first and last name"
  name: String!
  "The user's profile photo URL"
  profilePicture: String!
  "The host's profile bio description, will be shown in the listing"
  profileDescription: String!
}

type Guest implements User @key(fields: "id") {
  id: ID!
  "The user's first and last name"
  name: String!
  "The user's profile photo URL"
  profilePicture: String!
}

type Mutation {
  ### Accounts
  "Updates the logged-in user's profile information"
  updateProfile(updateProfileInput: UpdateProfileInput): UpdateProfileResponse!
}

interface MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}

input UpdateProfileInput {
  "The user's first and last name"
  name: String
  "The user's profile photo URL"
  profilePicture: String
  "The host's profile bio description, will be shown in the listing"
  profileDescription: String
}

type UpdateProfileResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Updated user"
  user: User
}
