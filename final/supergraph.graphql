schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type AddFundsToWalletResponse implements MutationResponse {
  """Updated wallet amount"""
  amount: Float

  """Similar to HTTP status code, represents the status of the mutation"""
  code: Int!

  """Human-readable message for the UI"""
  message: String!

  """Indicates whether the mutation was successful"""
  success: Boolean!
}

"""
What the location provides. An amenity should be tied to a specific category.
"""
type Amenity {
  """The category for the amenity"""
  category: AmenityCategory!
  id: ID!

  """The name of the amenity. Should be short."""
  name: String!
}

enum AmenityCategory {
  ACCOMMODATION_DETAILS
  OUTDOORS
  SPACE_SURVIVAL
}

"""A booking is a reservation for a specific listing"""
type Booking {
  """Check-in date for the reservation"""
  checkInDate: String!

  """Check-out date for the reservation"""
  checkOutDate: String!

  """The guest that reserved the location"""
  guest: Guest!

  """The host's review about the guest"""
  guestReview: Review

  """The guest's review about the host"""
  hostReview: Review
  id: ID!

  """The listing associated with the reservation"""
  listing: Listing!

  """The guest's review of the location"""
  locationReview: Review

  """
  The status of the booking - check BookingStatus type for all possibilities
  """
  status: BookingStatus!

  """
  Total price paid, calculated using the listing's costPerNight and the check-in check-out dates
  """
  totalPrice: Float!
}

"""The status of a booking"""
enum BookingStatus {
  COMPLETED
  CURRENT
  UPCOMING
}

"""Fields for creating a booking"""
input CreateBookingInput {
  """Date of check-in"""
  checkInDate: ID!

  """Date of check-out"""
  checkOutDate: ID!

  """ID of the listing associated with the booking"""
  listingId: ID!
}

"""The response after creating a booking."""
type CreateBookingResponse implements MutationResponse {
  """The newly-created booking"""
  booking: NewBookingResponse

  """Similar to HTTP status code, represents the status of the mutation"""
  code: Int!

  """Human-readable message for the UI"""
  message: String!

  """Indicates whether the mutation was successful"""
  success: Boolean!
}

input CreateListingInput {
  """The Listing's amenities """
  amenities: [ID!]!

  """The cost per night"""
  costPerNight: Float!

  """The listing's description"""
  description: String!

  """The location type of the listing"""
  locationType: LocationType!

  """The number of beds available"""
  numOfBeds: Int!

  """The thumbnail image for the listing"""
  photoThumbnail: String!

  """The listing's title"""
  title: String!
}

type CreateListingResponse implements MutationResponse {
  """Similar to HTTP status code, represents the status of the mutation"""
  code: Int!

  """The newly created listing"""
  listing: Listing

  """Human-readable message for the UI"""
  message: String!

  """Indicates whether the mutation was successful"""
  success: Boolean!
}

type Guest implements User
  @join__owner(graph: ACCOUNTS)
  @join__type(graph: ACCOUNTS, key: "id")
  @join__type(graph: MONOLITH, key: "id")
{
  """The reservations guest has"""
  bookings: [Booking]! @join__field(graph: MONOLITH)

  """Amount of money in the guest's wallet"""
  funds: Float! @join__field(graph: MONOLITH)
  id: ID! @join__field(graph: ACCOUNTS)

  """The user's first and last name"""
  name: String! @join__field(graph: ACCOUNTS)

  """The user's profile photo URL"""
  profilePicture: String! @join__field(graph: ACCOUNTS)
}

type Host implements User
  @join__owner(graph: ACCOUNTS)
  @join__type(graph: ACCOUNTS, key: "id")
  @join__type(graph: MONOLITH, key: "id")
{
  id: ID! @join__field(graph: ACCOUNTS)

  """The listings this host owns"""
  listings: [Listing] @join__field(graph: MONOLITH)

  """The user's first and last name"""
  name: String! @join__field(graph: ACCOUNTS)

  """The overall calculated rating for the host"""
  overallRating: Float @join__field(graph: MONOLITH)

  """The host's profile bio description, will be shown in the listing"""
  profileDescription: String! @join__field(graph: ACCOUNTS)

  """The user's profile photo URL"""
  profilePicture: String! @join__field(graph: ACCOUNTS)
}

type Listing {
  """The amenities available for this listing"""
  amenities: [Amenity]!

  """The list of bookings for a listing"""
  bookings: [Booking]!

  """The cost per night"""
  costPerNight: Float!

  """
  An array of upcoming reserved dates that the listing has been booked for
  """
  currentlyBookedDates: [ReservedDate]!

  """The listing's description"""
  description: String!

  """Owner of the listing"""
  host: Host!
  id: ID!

  """The location type of the listing"""
  locationType: LocationType!

  """The number of beds available"""
  numOfBeds: Int!

  """The number of current and upcoming bookings for a listing"""
  numberOfUpcomingBookings: Int!

  """The overall calculated rating for a listing"""
  overallRating: Float

  """The thumbnail image for the listing"""
  photoThumbnail: String!

  """The submitted reviews for this listing"""
  reviews: [Review]!

  """The listing's title"""
  title: String!

  """Calculated total cost of the listing with the given arguments"""
  totalCost(checkInDate: String!, checkOutDate: String!): Float!
}

enum LocationType {
  APARTMENT
  CAMPSITE
  HOUSE
  ROOM
  SPACESHIP
}

type Mutation {
  addFundsToWallet(amount: Float!): AddFundsToWalletResponse! @join__field(graph: MONOLITH)
  createBooking(createBookingInput: CreateBookingInput): CreateBookingResponse! @join__field(graph: MONOLITH)

  """Creates a new listing for the currently authenticated host"""
  createListing(listing: CreateListingInput!): CreateListingResponse! @join__field(graph: MONOLITH)

  """
  Creates a review for the guest - must be authored by host of past booking
  """
  submitGuestReview(bookingId: ID!, guestReview: ReviewInput!): SubmitGuestReviewResponse! @join__field(graph: MONOLITH)

  """
  Creates reviews for both host and listing for a particular booking - must be authored by guest of past booking
  """
  submitHostAndLocationReviews(bookingId: ID!, hostReview: ReviewInput!, locationReview: ReviewInput!): SubmitHostAndLocationReviewsResponse! @join__field(graph: MONOLITH)

  """Updates an existing listing"""
  updateListing(listing: UpdateListingInput!, listingId: ID!): UpdateListingResponse! @join__field(graph: MONOLITH)

  """Updates the logged-in user's profile information"""
  updateProfile(updateProfileInput: UpdateProfileInput): UpdateProfileResponse! @join__field(graph: ACCOUNTS)
}

interface MutationResponse {
  """Similar to HTTP status code, represents the status of the mutation"""
  code: Int!

  """Human-readable message for the UI"""
  message: String!

  """Indicates whether the mutation was successful"""
  success: Boolean!
}

"""Minimum details needed for a newly created booking"""
type NewBookingResponse {
  checkInDate: String!
  checkOutDate: String!
  id: ID!
}

type Query {
  """
  All bookings for the given listing, optionally filtered by a BookingStatus
  """
  bookingsForListing(listingId: ID!, status: BookingStatus): [Booking]! @join__field(graph: MONOLITH)

  """Current booking for guest based on current date"""
  currentGuestBooking: Booking @join__field(graph: MONOLITH)

  """A curated array of listings to feature on the homepage"""
  featuredListings: [Listing!]! @join__field(graph: MONOLITH)

  """A list of bookings for the guest - must be authenticated as guest"""
  guestBookings: [Booking]! @join__field(graph: MONOLITH)

  """Return the listings that belong to the currently logged-in host"""
  hostListings: [Listing!]! @join__field(graph: MONOLITH)

  """Returns the details about this listing"""
  listing(id: ID!): Listing @join__field(graph: MONOLITH)

  """Returns all possible amenities for a listing"""
  listingAmenities: [Amenity!]! @join__field(graph: MONOLITH)

  """Currently logged-in user"""
  me: User! @join__field(graph: ACCOUNTS)

  """Past bookings for guest based on current date"""
  pastGuestBookings: [Booking]! @join__field(graph: MONOLITH)

  """Search results for listings that fit the criteria provided"""
  searchListings(criteria: SearchListingsInput): [Listing!]! @join__field(graph: MONOLITH)

  """Upcoming and current bookings for guest based on current date"""
  upcomingGuestBookings: [Booking]! @join__field(graph: MONOLITH)
  user(id: ID!): User @join__field(graph: ACCOUNTS)
}

"""
A booking is reserved for a certain date range, marked by the checkInDate and checkOutDate fields
"""
type ReservedDate {
  """Date the guest checks in"""
  checkInDate: String!

  """Date the guest checks out"""
  checkOutDate: String!
}

"""
A review consists of a numerical rating and written text. It can be written by a host or a guest.
"""
type Review {
  """User that wrote the review"""
  author: User!
  id: ID!

  """
  The numerical rating for the review target, on a scale of 1-5, with 5 being excellent.
  """
  rating: Float!

  """Written comment the author has written about the review target"""
  text: String!
}

"""
ReviewInput is the bare minimum needed to submit a review, not tied to any target.
"""
input ReviewInput {
  rating: Float!
  text: String!
}

input SearchListingsInput {
  checkInDate: String!
  checkOutDate: String!
  limit: Int
  numOfBeds: Int
  page: Int
  sortBy: SortByCriteria
}

enum SortByCriteria {
  COST_ASC
  COST_DESC
}

"""The response after submitting reviews for a guest."""
type SubmitGuestReviewResponse implements MutationResponse {
  """Similar to HTTP status code, represents the status of the mutation"""
  code: Int!

  """Newly created review about the guest"""
  guestReview: Review

  """Human-readable message for the UI"""
  message: String!

  """Indicates whether the mutation was successful"""
  success: Boolean!
}

"""
The response after submitting reviews for both host and location together.
"""
type SubmitHostAndLocationReviewsResponse implements MutationResponse {
  """Similar to HTTP status code, represents the status of the mutation"""
  code: Int!

  """Newly created review about the host"""
  hostReview: Review

  """Newly created review about the location"""
  locationReview: Review

  """Human-readable message for the UI"""
  message: String!

  """Indicates whether the mutation was successful"""
  success: Boolean!
}

"""
Updates the properties included. If none are given, don't update anything
"""
input UpdateListingInput {
  """The Listing's amenities """
  amenities: [ID]

  """The cost per night"""
  costPerNight: Float

  """The listing's description"""
  description: String

  """The location type of the listing"""
  locationType: LocationType

  """The number of beds available"""
  numOfBeds: Int

  """The thumbnail image for the listing"""
  photoThumbnail: String

  """The listing's title"""
  title: String
}

type UpdateListingResponse implements MutationResponse {
  """Similar to HTTP status code, represents the status of the mutation"""
  code: Int!

  """The newly created listing"""
  listing: Listing

  """Human-readable message for the UI"""
  message: String!

  """Indicates whether the mutation was successful"""
  success: Boolean!
}

input UpdateProfileInput {
  """The user's first and last name"""
  name: String

  """The host's profile bio description, will be shown in the listing"""
  profileDescription: String

  """The user's profile photo URL"""
  profilePicture: String
}

type UpdateProfileResponse implements MutationResponse {
  """Similar to HTTP status code, represents the status of the mutation"""
  code: Int!

  """Human-readable message for the UI"""
  message: String!

  """Indicates whether the mutation was successful"""
  success: Boolean!

  """Updated user"""
  user: User
}

interface User {
  id: ID!

  """The user's first and last name"""
  name: String!

  """The user's profile photo URL"""
  profilePicture: String!
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  ACCOUNTS @join__graph(name: "accounts" url: "http://localhost:4002")
  MONOLITH @join__graph(name: "monolith" url: "http://localhost:4001")
}
